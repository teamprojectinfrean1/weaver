name: Java CD with Docker

on:
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ### CD
      # 배포를 위한 yml 설정
      - name: Check if main resources directory exists
        run: test -d ./src/main/resources || mkdir -p ./src/main/resources
        shell: bash

      - name: Make application-prod.yml
        run: echo "${{ secrets.YML_PROD }}" > ./src/main/resources/application-prod.yml

      #test를 제외한 프로젝트 빌드
      - name: Build With Gradle
        run: ./gradlew build -x test

      # 도커 로그인
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 도커 빌드 & 이미지 push
      - name: Docker Build
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/taskgram .
          docker push ${{ secrets.DOCKER_REPO }}/taskgram

      #docker-compose 파일을 ec2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo rm taskgram.log
            docker stop taskgram
            docker rm taskgram
            sudo docker pull ${{ secrets.DOCKER_REPO }}/taskgram
            sudo docker-compose up -d
            sudo docker logs -f taskgram &> taskgram.log &
            docker rmi -f $(docker images -f "dangling=true" -q)
